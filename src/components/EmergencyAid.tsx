import React, { useState } from 'react';
import { Heart, AlertTriangle, Clock, Phone, ChevronRight } from 'lucide-react';

interface EmergencyAidProps {
  language: string;
}

const translations = {
  en: {
    title: "Emergency First Aid",
    subtitle: "Quick response for animal emergencies",
    selectAnimal: "Select Animal Type",
    selectEmergency: "Select Emergency Type",
    animals: ["Dog", "Cat", "Poultry", "Cattle", "Pig"],
    emergencies: [
      "Severe Bleeding",
      "Difficulty Breathing",
      "Poisoning",
      "Choking",
      "Broken Bones",
      "High Fever",
      "Seizures",
      "Unconscious"
    ],
    emergencyHotline: "Emergency Hotline: +94 11 123 4567",
    immediateSteps: "Immediate Steps",
    warning: "Warning: This is emergency guidance only. Contact a veterinarian immediately.",
    step: "Step"
  },
  ta: {
    title: "роЕро╡роЪро░ роорпБродро▓рпБродро╡ро┐",
    subtitle: "ро╡ро┐ро▓роЩрпНроХрпБ роЕро╡роЪро░роиро┐ро▓рпИроХро│рпБроХрпНроХрпБ ро╡ро┐ро░рпИро╡ро╛рой рооро▒рпБроорпКро┤ро┐",
    selectAnimal: "ро╡ро┐ро▓роЩрпНроХрпБ ро╡роХрпИропрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
    selectEmergency: "роЕро╡роЪро░роиро┐ро▓рпИ ро╡роХрпИропрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
    animals: ["роиро╛ропрпН", "рокрпВройрпИ", "роХрпЛро┤ро┐", "рооро╛роЯрпБ", "рокройрпНро▒ро┐"],
    emergencies: [
      "роХроЯрпБроорпИропро╛рой роЗро░родрпНродрокрпНрокрпЛроХрпНроХрпБ",
      "роорпВроЪрпНроЪрпБродрпНродро┐рогро▒ро▓рпН",
      "ро╡ро┐ро╖роорпН",
      "роорпВроЪрпНроЪрпБродрпНродро┐рогро▒ро▓рпН",
      "роОро▓рпБроорпНрокрпБ роорпБро▒ро┐ро╡рпБ",
      "роЕродро┐роХ роХро╛ропрпНроЪрпНроЪро▓рпН",
      "ро╡ро▓ро┐рокрпНрокрпБ",
      "роЪрпБропроиро┐ройрпИро╡ро┐ро▓рпНро▓ро╛род роиро┐ро▓рпИ"
    ],
    emergencyHotline: "роЕро╡роЪро░ родрпКро▓рпИрокрпЗроЪро┐: +94 11 123 4567",
    immediateSteps: "роЙроЯройроЯро┐ роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН",
    warning: "роОроЪрпНроЪро░ро┐роХрпНроХрпИ: роЗродрпБ роЕро╡роЪро░ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН роороЯрпНроЯрпБроорпЗ. роЙроЯройроЯро┐ропро╛роХ рооро░рпБродрпНродрпБро╡ро░рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН.",
    step: "рокроЯро┐"
  }
};

const EmergencyAid: React.FC<EmergencyAidProps> = ({ language }) => {
  const [selectedAnimal, setSelectedAnimal] = useState('');
  const [selectedEmergency, setSelectedEmergency] = useState('');

  const t = translations[language as keyof typeof translations];

  const getEmergencySteps = (animal: string, emergency: string, lang: string) => {
    const key = `${animal}-${emergency}`;
    
    const steps = {
      'Dog-Severe Bleeding': {
        en: [
          "Keep calm and approach the dog carefully",
          "Apply direct pressure to the wound with clean cloth",
          "If bleeding doesn't stop, apply pressure to pressure points",
          "Elevate the wounded area if possible",
          "Apply bandage and seek immediate veterinary care"
        ],
        ta: [
          "роЕроорпИродро┐ропро╛роХ роЗро░рпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роиро╛ропрпИ роХро╡ройрооро╛роХ роЕрогрпБроХро╡рпБроорпН",
          "роЪрпБродрпНродрооро╛рой родрпБрогро┐ропро╛ро▓рпН роХро╛ропродрпНродро┐ройрпН роорпАродрпБ роирпЗро░роЯро┐ роЕро┤рпБродрпНродроорпН роХрпКроЯрпБроЩрпНроХро│рпН",
          "роЗро░родрпНродрокрпНрокрпЛроХрпНроХрпБ роиро┐ро▒рпНроХро╡ро┐ро▓рпНро▓рпИ роОройрпНро▒ро╛ро▓рпН, роЕро┤рпБродрпНрод рокрпБро│рпНро│ро┐роХро│ро┐ро▓рпН роЕро┤рпБродрпНродроорпН роХрпКроЯрпБроЩрпНроХро│рпН",
          "роорпБроЯро┐роирпНродро╛ро▓рпН роХро╛ропроороЯрпИроирпНрод рокроХрпБродро┐ропрпИ роЙропро░рпНродрпНродро╡рпБроорпН",
          "роХроЯрпНроЯрпБ рокрпЛроЯрпНроЯрпБ роЙроЯройроЯро┐ рооро░рпБродрпНродрпБро╡ роЙродро╡ро┐ рокрпЖро▒ро╡рпБроорпН"
        ]
      },
      'Cat-Difficulty Breathing': {
        en: [
          "Keep the cat calm and quiet",
          "Ensure airway is clear - remove any visible obstructions",
          "Position cat upright or on side",
          "Provide fresh air and cool environment",
          "Transport to veterinarian immediately"
        ],
        ta: [
          "рокрпВройрпИропрпИ роЕроорпИродро┐ропро╛роХро╡рпБроорпН роЕроорпИродро┐ропро╛роХро╡рпБроорпН ро╡рпИродрпНродро┐ро░рпБроЩрпНроХро│рпН",
          "роХро╛ро▒рпНро▒рпБрокрпНрокро╛родрпИ родрпЖро│ро┐ро╡ро╛роХ роЙро│рпНро│родрпИ роЙро▒рпБродро┐ роЪрпЖропрпНропро╡рпБроорпН - родрпЖро░ро┐ропрпБроорпН родроЯрпИроХро│рпИ роЕроХро▒рпНро▒ро╡рпБроорпН",
          "рокрпВройрпИропрпИ роирпЗро░ро╛роХ роЕро▓рпНро▓родрпБ рокроХрпНроХро╡ро╛роЯрпНроЯро┐ро▓рпН ро╡рпИроХрпНроХро╡рпБроорпН",
          "рокрпБродро┐роп роХро╛ро▒рпНро▒рпБ рооро▒рпНро▒рпБроорпН роХрпБро│ро┐ро░рпНроирпНрод роЪрпВро┤ро▓рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН",
          "роЙроЯройроЯро┐ропро╛роХ рооро░рпБродрпНродрпБро╡ро░ро┐роЯроорпН роХрпКрогрпНроЯрпБ роЪрпЖро▓рпНро▓ро╡рпБроорпН"
        ]
      },
      'Poultry-Poisoning': {
        en: [
          "Remove bird from source of poison immediately",
          "Do NOT induce vomiting unless instructed by veterinarian",
          "Provide fresh water if bird is conscious",
          "Keep bird warm and quiet",
          "Contact poultry veterinarian immediately"
        ],
        ta: [
          "рокро▒ро╡рпИропрпИ роЙроЯройроЯро┐ропро╛роХ ро╡ро┐ро╖ роорпВро▓родрпНродро┐ро▓ро┐ро░рпБроирпНродрпБ роЕроХро▒рпНро▒ро╡рпБроорпН",
          "рооро░рпБродрпНродрпБро╡ро░рпН роЕро▒ро┐ро╡рпБро▒рпБродрпНродро╛род ро╡ро░рпИ ро╡ро╛роирпНродро┐ропрпИ родрпВрогрпНроЯ ро╡рпЗрогрпНроЯро╛роорпН",
          "рокро▒ро╡рпИ роЪрпБропроиро┐ройрпИро╡ро┐ро▓рпН роЗро░рпБроирпНродро╛ро▓рпН рокрпБродро┐роп родрогрпНрогрпАро░рпН ро╡ро┤роЩрпНроХро╡рпБроорпН",
          "рокро▒ро╡рпИропрпИ роЪрпВроЯро╛роХро╡рпБроорпН роЕроорпИродро┐ропро╛роХро╡рпБроорпН ро╡рпИроХрпНроХро╡рпБроорпН",
          "роЙроЯройроЯро┐ропро╛роХ роХрпЛро┤ро┐ рооро░рпБродрпНродрпБро╡ро░рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН"
        ]
      }
    };

    return steps[key as keyof typeof steps]?.[lang as keyof typeof steps[keyof typeof steps]] || [];
  };

  const steps = selectedAnimal && selectedEmergency 
    ? getEmergencySteps(selectedAnimal, selectedEmergency, language)
    : [];

  return (
    <div className="max-w-4xl mx-auto">
      {/* Emergency Header */}
      <div className="bg-red-600 text-white rounded-lg p-6 mb-6">
        <div className="flex items-center space-x-3 mb-4">
          <Heart className="h-8 w-8" />
          <div>
            <h2 className="text-2xl font-bold">{t.title}</h2>
            <p className="text-red-100">{t.subtitle}</p>
          </div>
        </div>
        <div className="bg-red-700 p-4 rounded-lg">
          <div className="flex items-center space-x-2">
            <Phone className="h-5 w-5" />
            <span className="font-semibold">{t.emergencyHotline}</span>
          </div>
        </div>
      </div>

      {/* Animal Selection */}
      <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">{t.selectAnimal}</h3>
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          {t.animals.map((animal, index) => (
            <button
              key={index}
              onClick={() => setSelectedAnimal(animal)}
              className={`p-4 rounded-lg border-2 transition-colors ${
                selectedAnimal === animal
                  ? 'border-blue-600 bg-blue-50 text-blue-800'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="text-center">
                <div className="text-2xl mb-2">ЁЯР╛</div>
                <span className="text-sm font-medium">{animal}</span>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Emergency Type Selection */}
      {selectedAnimal && (
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">{t.selectEmergency}</h3>
          <div className="grid md:grid-cols-2 gap-3">
            {t.emergencies.map((emergency, index) => (
              <button
                key={index}
                onClick={() => setSelectedEmergency(emergency)}
                className={`p-4 rounded-lg border-2 text-left transition-colors ${
                  selectedEmergency === emergency
                    ? 'border-red-600 bg-red-50 text-red-800'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <div className="flex items-center justify-between">
                  <span className="font-medium">{emergency}</span>
                  <ChevronRight className="h-4 w-4" />
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Emergency Steps */}
      {steps.length > 0 && (
        <div className="bg-white rounded-lg shadow-lg p-6">
          <div className="flex items-center space-x-2 mb-4">
            <AlertTriangle className="h-6 w-6 text-red-600" />
            <h3 className="text-lg font-semibold text-gray-800">{t.immediateSteps}</h3>
          </div>
          
          <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6">
            <p className="text-sm text-yellow-800">{t.warning}</p>
          </div>

          <div className="space-y-4">
            {steps.map((step, index) => (
              <div key={index} className="flex items-start space-x-4">
                <div className="bg-blue-600 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                  {index + 1}
                </div>
                <div className="flex-1">
                  <p className="text-gray-800">{step}</p>
                </div>
              </div>
            ))}
          </div>

          <div className="mt-6 p-4 bg-red-50 rounded-lg">
            <div className="flex items-center space-x-2">
              <Clock className="h-5 w-5 text-red-600" />
              <p className="text-sm text-red-800 font-medium">
                {language === 'en' 
                  ? "Time is critical - contact veterinarian immediately after providing first aid"
                  : "роирпЗро░роорпН роорпБроХрпНроХро┐ропроорпН - роорпБродро▓рпБродро╡ро┐ ро╡ро┤роЩрпНроХро┐роп рокро┐ро▒роХрпБ роЙроЯройроЯро┐ропро╛роХ рооро░рпБродрпНродрпБро╡ро░рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН"
                }
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EmergencyAid;